:py:mod:`photonmap.Loader.LoadCaptor`
=====================================

.. py:module:: photonmap.Loader.LoadCaptor


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   photonmap.Loader.LoadCaptor.Captor



Functions
~~~~~~~~~

.. autoapisummary::

   photonmap.Loader.LoadCaptor.addCaptors
   photonmap.Loader.LoadCaptor.findIndexOfCaptorInList
   photonmap.Loader.LoadCaptor.addCapteurPgl



.. py:class:: Captor(pos_x=0, pos_y=0, pos_z=0, nor_x=0, nor_y=0, nor_z=0, r=0)


   A class which contains all the data of captor.

   Attributes
   ----------
   xSite: float
       The X coordinate of captor's position
   ySite: float
       The Y coordinate of captor's position
   zSite: float
       The Z coordinate of captor's position
   xNormal: float
       The X coordinate of captor's normal
   yNormal: float
       The Y coordinate of captor's normal
   zNormal: float
       The Z coordinate of captor's normal
   radius: float
       The radius of captor
   vertices: array
       The vertices of captor's geometry
   normals: array
       The normal vectors of each vertices in captor's geometry
   triangles: array
       The triangles of captor's geometry



   .. py:method:: createGeometry()

      Create geometry of circular captor 

      Returns
      -------
      vertices: array
          The vertices of captor's geometry
      normals: array
          The normal vectors of each vertices in captor's geometry
      triangles: array
          The triangles of captor's geometry



   .. py:method:: equal(xSite, ySite, zSite)

      Check if the coordinate is equal to the position of captor

      Parameters
      ----------
      xSite: float
          The X coordinate
      ySite: float
          The Y coordinate
      zSite: float
          The Z coordinate

      Returns
      -------
          True if equal
          False if not equal



   .. py:method:: getGeometry()

      Get geometry of captor

      Returns
      -------
      vertices: array
          The vertices of captor's geometry
      normals: array
          The normal vectors of each vertices in captor's geometry
      triangles: array
          The triangles of captor's geometry




.. py:function:: addCaptors(scene, scale_factor, captor_triangle_dict, filename)

   Adds circular captors to the scene. the captors needs to be in a file

   Parameters
   ----------
   scene : libphotonmap_core.Scene
       The photon mapping scene used to run the simulation
   scale_factor : int
       The size of geometries. The vertices of geometries is recalculated by dividing their coordinates by this value
   captor_triangle_dict : dict
       The dictionary of the triangles of captors
   filename : str
       The link to the file which contains the data of captors


   Returns
   -------
       Add all the mesh of captors to the scene and return the list of captors



.. py:function:: findIndexOfCaptorInList(list_captor, x, y, z)

   Find the index of a captor while knowing its position

   Parameters
   ----------
   list_captor : Array
       The list of the captor in the scene
   x : float
       x coordinate
   y : float
       y coordinate
   z : float
       z coordinate

   Returns
   -------
       if not found, return -1 
       if found, return the index of the captor



.. py:function:: addCapteurPgl(sc, scale_factor: int, filename: str)

   Add the captors to the PlantGL scene to visualize the scene

   Parameters
   ----------
   sc : Lscene
       The plantgl scene
   scale_factor : int
       The size of geometries. The vertices of geometries is recalculated by dividing their coordinates by this value
   filename : float
       The link to the file which contains the data of captors

   Returns
   -------
       A PlantGL Scene with the captors



